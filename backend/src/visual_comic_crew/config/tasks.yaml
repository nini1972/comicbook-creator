story_creation_task:
  description: >
    Create a comic story script for {topic} with:
    1. A compelling storyline with beginning, middle, and end
    2. 4-6 panel breakdown with detailed visual descriptions
    3. Character descriptions and dialogue for each panel
    4. Visual style guidelines and mood specifications
  expected_output: >
    A detailed comic script with panel-by-panel descriptions,
    character details, dialogue, and visual style notes
  agent: story_writer

orchestrated_generation_task:
  description: |
    Orchestrate complete comic generation with validation and retry logic.

    ORCHESTRATION WORKFLOW:
    1. INITIAL GENERATION: Delegate to Visual Director for initial panel generation
    2. VALIDATION CHECK: Review generation results and validate panel completeness
    3. RETRY LOGIC: For any failed or missing panels:
       - Identify specific failed panel numbers
       - Delegate regeneration of ONLY failed panels to Visual Director
       - Maximum 3 retry attempts per panel
       - Continue until all panels succeed or max retries reached
    4. FINAL VALIDATION: Ensure all panels are complete before proceeding

    RETRY STRATEGY:
    - Track failed panels individually
    - Regenerate only missing/failed panels (not all panels)
    - Provide clear feedback to Visual Director about what needs regeneration
    - Implement progressive retry with detailed failure analysis

    QUALITY CONTROL:
    - Work with Evaluator to validate panel existence
    - Ensure no fabricated filenames are accepted
    - Maintain detailed logs of retry attempts and results
    - Report final success/failure status with specific details

    RESOURCE MANAGEMENT:
    - Maximum retry limit: 3 attempts per panel
    - Total generation timeout: 10 minutes
    - Graceful degradation for persistent failures
    - Clear error reporting for manual intervention

    SUCCESS CRITERIA:
    - ALL panels (1-6) successfully generated with real image files
    - All images exist in both backend and frontend locations
    - Panel validation returns 100% PASS status
    - No fabricated or non-existent image references
  expected_output: >
    Complete orchestration report with:
    - Initial generation attempt results
    - Retry attempts and outcomes for failed panels
    - Final panel generation status (SUCCESS/PARTIAL/FAILED)
    - Detailed panel-by-panel validation results
    - Total attempts, successes, and failures
    - Clear recommendation for next steps (proceed to assembly or manual intervention)
  agent: orchestrator
  context:
    - story_creation_task

image_generation_task:
  description: |
    Generate comic panel images based on the story script with consistent character appearances using Option 6 approach.

    STEP 1 - CHARACTER CONSISTENCY SETUP (Option 6 Approach):
    If the story contains named characters, FIRST attempt to create character references:
    1. Identify all main characters from the story
    2. For EACH character, use the Character Consistency Tool with action "create_character":
       - character_name: The character's name
       - character_description: Detailed physical description from the story
       - existing_image_path: (optional) Path to existing character image if available
    3. If character reference creation FAILS, note the failure and continue with panel generation
    4. DO NOT stop the entire process if character reference creation fails

    STEP 2 - PANEL GENERATION (MANDATORY FOR ALL PANELS):
    You MUST generate ALL panels described in the story. For each panel:
    1. Extract the visual description for that panel
    2. Identify which named characters appear in this panel
    3. For panels WITH named characters:
       - IF character reference exists: Use Character Consistency Tool with action "generate_scene"
       - IF character reference FAILED: Use Gemini Image Generator with detailed character description
    4. For panels WITHOUT named characters:
       - Use the Gemini Image Generator tool for standard generation
    5. You MUST call the actual tool and record the REAL returned image path
    6. NEVER fabricate or make up image paths - only use paths returned by tools

    ERROR HANDLING REQUIREMENTS:
    - If character reference creation fails, continue with direct image generation
    - If a panel generation fails, note it and continue with remaining panels
    - ALWAYS attempt to generate ALL panels - never stop early
    - Use fallback methods when primary methods fail
    - For failed character references, include detailed character descriptions in Gemini prompts

    FALLBACK STRATEGY FOR CHARACTER CONSISTENCY:
    When character references fail, enhance your Gemini Image Generator prompts with:
    - Detailed physical description of the character from the story
    - Consistent style notes (e.g., "same character as previous panels")
    - Visual continuity cues (clothing, facial features, build, etc.)

    TOOL CALL REQUIREMENTS:
    - You MUST actually call tools for each panel generation
    - NEVER make up fake filenames like "panel2.png", "panel3.png" etc.
    - ONLY use image paths actually returned by the tools
    - If a tool call fails, record "FAILED" for that panel
    - Continue with remaining panels even if early ones fail

    CRITICAL TOOL ARGUMENT FORMAT:
    When calling Gemini Image Generator, use EXACTLY this format:
    - prompt: "your description text here" (simple string, NOT a dictionary)
    - base_image_paths: null (or list of paths if needed)

    INCORRECT FORMAT (causes validation errors):
    - prompt: {"description": "text", "type": "str"} ❌ 

    CORRECT FORMAT:
    - prompt: "A whimsical comic panel showing..." ✅

    MANDATORY FINAL SUMMARY:
    You MUST provide a complete summary with:
    - Character references: [list with success/failure status]
    - Panel generation results for EACH panel (1 through total):
      - Panel X: [actual tool-returned path OR "FAILED" with reason]
    - Total successful generations vs total attempted
    - Specific failure reasons for any failed panels

    Ensure visual continuity and comic art style (same characters, styles, palette).
    Maintain consistent lighting and color palette.
  expected_output: >
    A complete summary with ACTUAL results only (no fabricated data):

    Character References:
    - [Character Name]: [SUCCESS: path] OR [FAILED: reason]

    Panel Generation Results:
    - Panel 1: [actual tool-returned path OR "FAILED: reason"]
    - Panel 2: [actual tool-returned path OR "FAILED: reason"] 
    - Panel 3: [actual tool-returned path OR "FAILED: reason"]
    - Panel 4: [actual tool-returned path OR "FAILED: reason"]
    - Panel 5: [actual tool-returned path OR "FAILED: reason"]
    - Panel 6: [actual tool-returned path OR "FAILED: reason"]

    Summary:
    - Total panels attempted: [number]
    - Successfully generated: [number]
    - Failed: [number with reasons]

    CRITICAL: Only include paths actually returned by tools. Never make up filenames.
  agent: visual_director
  context:
    - story_creation_task

panel_validation_task:
  description: |
    Validate that ALL comic panels referenced in the image generation results have
    corresponding actual image files in the filesystem before allowing comic assembly.

    VALIDATION REQUIREMENTS:
    1. Parse the image generation task results to extract all panel image paths
    2. For EACH panel image path referenced:
       - Check if the file exists in the backend output folder
       - Check if the file exists in the frontend comic_panels folder
       - Verify the file is not empty/corrupted
    3. Count total panels expected vs panels with valid images
    4. Identify any missing or invalid panel images

    VALIDATION CHECKS:
    - Panel completeness: All panels (1-6) have image references
    - File existence: All referenced images exist in filesystem
    - Path validation: All paths are real (not fabricated like "panel2.png")
    - Accessibility: Images are accessible for frontend display

    MANDATORY VALIDATION REPORT:
    You MUST provide a detailed validation report with:

    Panel Validation Results:
    - Panel 1: [✅ VALID: path] OR [❌ MISSING: reason]
    - Panel 2: [✅ VALID: path] OR [❌ MISSING: reason]
    - Panel 3: [✅ VALID: path] OR [❌ MISSING: reason]
    - Panel 4: [✅ VALID: path] OR [❌ MISSING: reason]
    - Panel 5: [✅ VALID: path] OR [❌ MISSING: reason]
    - Panel 6: [✅ VALID: path] OR [❌ MISSING: reason]

    File System Check:
    - Backend files found: [number]
    - Frontend files found: [number]
    - Missing files: [list of missing panels]

    VALIDATION STATUS: [PASS/FAIL]

    If FAIL: Stop the comic assembly process and report missing panels
    If PASS: Allow comic to proceed to assembly

    CRITICAL: Never approve comics with missing panel images!
  expected_output: >
    A comprehensive validation report showing:
    - Detailed panel-by-panel validation results
    - File system verification status
    - Overall PASS/FAIL determination
    - Specific missing panels if any failures
    - Clear recommendation for next steps

    Only comics with 100% panel validation should be marked as PASS.
  agent: evaluator
  context:
    - story_creation_task
    - orchestrated_generation_task

comic_assembly_task:
  description: |
    Use the Comic Layout Designer tool to create the final comic layout ONLY if validation passed.

    VALIDATION CHECK FIRST:
    1. Review the panel validation task results
    2. If validation status is FAIL, return an error message and stop
    3. If validation status is PASS, proceed with comic assembly

    COMIC ASSEMBLY (only if validation passed):
    1. Extract panel descriptions and dialogue from the story task
    2. Extract image paths from the image generation task  
    3. Call the Comic Layout Designer tool with these parameters
    4. Return ONLY the tool's markdown output - NO agent thoughts or reasoning

    CRITICAL: Do NOT proceed with assembly if the panel validation failed!
  expected_output: >
    If validation FAILED: Error message stating validation failure and requesting manual intervention
    If validation PASSED: Clean comic markdown layout with panels, images, and dialogue.
    NO agent thoughts, reasoning, or meta-commentary.
    ONLY the comic content itself or error message.
  agent: comic_assembler
  context:
    - story_creation_task
    - orchestrated_generation_task
    - panel_validation_task
