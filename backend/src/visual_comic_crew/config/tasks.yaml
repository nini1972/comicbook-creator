story_creation_task:
  description: >
    Create a comic story script for {topic} with:
    1. A compelling storyline with beginning, middle, and end
    2. 4-6 panel breakdown with detailed visual descriptions
    3. Character descriptions and dialogue for each panel
    4. Visual style guidelines and mood specifications
  expected_output: >
    A detailed comic script with panel-by-panel descriptions,
    character details, dialogue, and visual style notes
  agent: story_writer

orchestrated_generation_task:
  description: |
    Orchestrate complete comic generation with validation and retry logic.

    ORCHESTRATION WORKFLOW:
    1. INITIAL GENERATION: Delegate to Visual Director for initial panel generation
    2. VALIDATION CHECK: Review generation results and validate panel completeness
    3. RETRY LOGIC: For any failed or missing panels:
       - Identify specific failed panel numbers
       - Delegate regeneration of ONLY failed panels to Visual Director
       - Maximum 2 retry attempts per panel
       - Continue until all panels succeed or max retries reached
    4. FINAL VALIDATION: Ensure all panels are complete before proceeding
    5. CLEANUP: Remove temporary files and folders created during generation

    RETRY STRATEGY:
    - Track failed panels individually
    - Regenerate only missing/failed panels (not all panels)
    - Provide clear feedback to Visual Director about what needs regeneration
    - Implement progressive retry with detailed failure analysis

    QUALITY CONTROL:
    - Work with Evaluator to validate panel existence
    - Ensure no fabricated filenames are accepted
    - Maintain detailed logs of retry attempts and results
    - Report final success/failure status with specific details

    RESOURCE MANAGEMENT:
    - Maximum retry limit: 3 attempts per panel
    - Total generation timeout: 10 minutes
    - Graceful degradation for persistent failures
    - Clear error reporting for manual intervention
    - Automatic cleanup of temporary files and folders

    SUCCESS CRITERIA:
    - ALL panels (1-6) successfully generated with real image files
    - All images exist in both backend and frontend locations
    - Panel validation returns 100% PASS status
    - No fabricated or non-existent image references
    - Temporary files and folders cleaned up successfully
  expected_output: >
    Complete orchestration report with:
    - Initial generation attempt results
    - Retry attempts and outcomes for failed panels
    - Final panel generation status (SUCCESS/PARTIAL/FAILED)
    - Detailed panel-by-panel validation results
    - Total attempts, successes, and failures
    - Cleanup results (files removed, folders cleaned)
    - Clear recommendation for next steps (proceed to assembly or manual intervention)
  agent: orchestrator
  context:
    - story_creation_task

image_generation_task:
  description: |
    Generate comic panel images based on the story script.

    CHARACTER CREATION PHASE:
    1. FIRST: Identify all named characters mentioned in the story
    2. For EACH character, call Character Consistency Tool with action="create_character"
       to create reference images before generating any scenes
    3. Verify character references exist before proceeding to scene generation

    SCENE GENERATION PHASE:
    4. Generate ALL panels using appropriate tools:
       - Single character scenes: Character Consistency Tool (action="generate_scene")
       - Multiple character scenes: Multi-Character Scene Tool
       - Scenes with no characters: Gemini Image Generator
    5. Use actual tool-returned paths only (never fabricate filenames)

    REQUIREMENTS:
    - Create character references BEFORE generating any scenes
    - Generate ALL panels described in the story
    - Use correct tool based on character count in each panel
    - Record real image paths returned by tools
    - Continue with remaining panels if any fail

    OUTPUT: JSON object mapping panel numbers to actual filenames
    Example: {"1": "filename.png", "2": "filename.png"}
  expected_output: >
    A valid JSON object with panel mappings. Format: {"panel_number": "actual_filename.png"}
    Example: {"1": "consistent_panel_001_character_123456789.png", "2": "multi_char_panel_002_chars_123456789.png"}
    Do NOT include any text before or after the JSON. The output must be parseable as JSON.
  agent: visual_director
  context:
    - story_creation_task

panel_validation_task:
  description: |
    Validate that ALL comic panels referenced in the image generation results have
    corresponding actual image files in the filesystem before allowing comic assembly.

    IMPORTANT: Extract the panel-to-filename mapping from the IMAGE GENERATION TASK output.
    The image generation task SHOULD output a JSON object, but if it contains descriptive text,
    you must extract the actual filenames mentioned for each panel.

    ACCEPTABLE INPUT FORMATS:
    1. Pure JSON: {"1": "filename.png", "2": "filename.png"}
    2. The filenames can have the following structure starting with 'server_generated_gemini-image-tutorial', or 'consistent_panel' or 'refined_panel', or 'multi_char_panel'.    2. Descriptive text containing filenames: "Panel 1 generated: filename1.png, Panel 2 generated: filename2.png"
    3. Mixed format with JSON embedded in text

    EXTRACTION RULES:
    - Look for JSON objects first
    - If no JSON found, scan text for panel number + filename patterns
    - Extract actual filenames, NOT generic ones like "panel_1.png"
    - Each panel (1-6) must have a unique, specific filename

    If you cannot find valid filenames for panels 1-6, STOP and report the extraction failure.

    VALIDATION REQUIREMENTS:
    1. Extract actual panel-to-filename mapping from image generation output
    2. For EACH panel number and filename in the mapping:
       - Check if the filename exists in the backend output folder
       - Check if the filename exists in the frontend comic_panels folder
       - Verify the filename is not empty/corrupted
    3. Count total panels expected vs panels with valid images
    4. Identify any missing or invalid panel images

    VALIDATION CHECKS:
    - Panel completeness: All panels (1-6) have image references
    - File existence: All referenced images exist in filesystem, check on their filename
    - Path validation: All paths are real (not fabricated like "panel2.png")
    - Accessibility: Images are accessible for frontend display

    CRITICAL: Do NOT use guessed filenames. Only validate actual filenames that were generated.

    MANDATORY VALIDATION REPORT:
    You MUST provide a detailed validation report with:

    Panel Validation Results:
    - Panel 1: [✅ VALID: path] OR [❌ MISSING: reason]
    - Panel 2: [✅ VALID: path] OR [❌ MISSING: reason]
    - Panel 3: [✅ VALID: path] OR [❌ MISSING: reason]
    - Panel 4: [✅ VALID: path] OR [❌ MISSING: reason]
    - Panel 5: [✅ VALID: path] OR [❌ MISSING: reason]
    - Panel 6: [✅ VALID: path] OR [❌ MISSING: reason]

    File System Check:
    - Backend files found: [number]
    - Frontend files found: [number]
    - Missing files: [list of missing panels]

    VALIDATION STATUS: [PASS/FAIL]

    If FAIL: Stop the comic assembly process and report missing panels
    If PASS: Allow comic to proceed to assembly

    CRITICAL: Never approve comics with missing panel images!
  expected_output: >
    A comprehensive validation report showing:
    - Detailed panel-by-panel validation results using ACTUAL filenames from image generation
    - File system verification status
    - Overall PASS/FAIL determination
    - Specific missing panels if any failures
    - Clear recommendation for next steps

    CRITICAL: Report must be based on actual generated filenames, not guessed ones.
    Only comics with 100% panel validation (all actual generated files present) should be marked as PASS.
  agent: evaluator
  context:
    - story_creation_task
    - orchestrated_generation_task
    - image_generation_task

comic_assembly_task:
  description: |
    Use the Comic Layout Designer tool to create the final comic layout ONLY if validation passed.

    VALIDATION CHECK FIRST:
    1. Review the panel validation task results
    2. If validation status is FAIL, return an error message and stop
    3. If validation status is PASS, proceed with comic assembly

    COMIC ASSEMBLY (only if validation passed):
    1. Extract panel descriptions and dialogue from the story task
    2. Extract image paths from the image generation task  
    3. Call the Comic Layout Designer tool with these parameters
    4. Return ONLY the tool's markdown output - NO agent thoughts or reasoning

    CRITICAL: Do NOT proceed with assembly if the panel validation failed!
  expected_output: >
    If validation FAILED: Error message stating validation failure and requesting manual intervention
    If validation PASSED: Clean comic markdown layout with panels, images, and dialogue.
    NO agent thoughts, reasoning, or meta-commentary.
    ONLY the comic content itself or error message.
  agent: comic_assembler
  context:
    - story_creation_task
    - orchestrated_generation_task
    - panel_validation_task
