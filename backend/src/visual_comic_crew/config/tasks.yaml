story_creation_task:
  description: >
    Create a comic story script for {topic} and save it to the centralized story metadata file:
    1. Use StoryMetadataWriter to set the topic: action="set_topic", topic="{topic}"
    2. Create a compelling storyline with beginning, middle, and end
    3. Create 6 panel breakdown with detailed visual descriptions and dialogue
    4. Save the full story text using StoryMetadataWriter: action="set_story_text"
    5. Save the panels using StoryMetadataWriter: action="set_panels" (as JSON string)
    6. Mark task as completed using StoryMetadataWriter: action="mark_completed", agent_name="story_writer"

    Do NOT generate any images yourself - that is the Visual Director's job.
    Save all data to the metadata file for other agents to access reliably.
  expected_output: >
    A confirmation message that the story has been saved to the metadata file, including:
    - Topic set successfully
    - Full story text saved (character count)
    - 6 panels saved with descriptions and dialogue
    - Agent marked as completed

    Do NOT include the full story or panel JSON in your response - it should be saved to the metadata file.
  agent: story_writer

image_generation_task:
  description: >
    Generate comic panel images based on story data from the centralized metadata file:

    METADATA ACCESS PHASE:
    1. Use StoryMetadataReader with action="get_panels" to read all panel descriptions
    2. Verify exactly 6 panels are available - if not, delegate to orchestrator
    3. Use StoryMetadataReader with action="get_story_text" to understand story context

    CHARACTER CREATION PHASE:
    4. Identify all named characters mentioned in the panels
    5. For EACH character, call Character Consistency Tool with action="create_character"
       to create reference images before generating any scenes
    6. Verify character references exist before proceeding to scene generation

    SCENE GENERATION PHASE:
    7. For each panel (1-6), use StoryMetadataReader action="get_panel" to get detailed info
    8. Generate images using appropriate tools based on character count:
       - Single character scenes: Character Consistency Tool (action="generate_scene")
       - Multiple character scenes: Multi-Character Scene Tool
       - Touch-ups for existing images: Image Refinement Tool
       - Scenes with no characters: Gemini Image Generator
    9. For each generated image, use StoryMetadataWriter action="set_image" to save filename
    10. Register each generated panel in the panel registry with verified=true status

    COMPLETION PHASE:
    11. Use StoryMetadataWriter action="mark_completed", agent_name="visual_director"
    12. Provide summary of generated images and any issues encountered

    REQUIREMENTS:
    - Create character references BEFORE generating any scenes
    - Generate ALL panels described in the story metadata
    - Use correct tool based on character count in each panel
    - Save real image paths to metadata file using StoryMetadataWriter
    - Register each generated panel in the panel registry
    - Continue with remaining panels if any fail
  expected_output: >
    A summary of image generation results including:
    - Number of panels processed from metadata file
    - Characters identified and reference images created  
    - Panel-by-panel generation status with actual filenames saved to metadata
    - Any issues encountered and how they were resolved
    - Confirmation that all images were saved to story metadata file
    - Agent marked as completed in metadata file

    Do NOT return JSON mappings in your response - save all filenames to metadata instead.
    Provide a brief summary of what was generated and saved.

  agent: visual_director
  context:
    - story_creation_task

orchestrated_generation_task:
  description: |
    Orchestrate complete comic generation with validation and retry logic.

    ORCHESTRATION WORKFLOW:
    1. VERIFY JSON file received from the Visual Director with the panel descriptions, dialogues and the actual filenames. In case of missing parts, inform the Visual Director to regenerate the missing parts.
    2. REGISTRY VERIFICATION: Check panel registry for completed panels after the Visual Director finishes
    3. VALIDATION CHECK: Review generation results and validate panel completeness
    4. RETRY LOGIC: For any failed or missing panels:
       - Identify specific failed panel numbers
       - Delegate regeneration of ONLY failed panels to Visual Director
       - Maximum 2 retry attempts per panel
       - Continue until all panels succeed or max retries reached
    4. FINAL VALIDATION: Ensure all panels are complete and registered before proceeding
    5. CLEANUP: After successful generation of the comicbook, remove all temporary files created during generation
    6. REPORTING: Provide a comprehensive report of the entire process including successes, failures, and cleanup status

  RETRY STRATEGY:
    - Track failed panels individually
    - Regenerate only missing/failed panels (not all panels)
    - Provide clear feedback to Visual Director about what needs regeneration
    - Implement progressive retry with detailed failure analysis

  QUALITY CONTROL:
    - Work with Evaluator to validate panel existence
    - Ensure no fabricated filenames are accepted
    - Verify all panels are registered in panel registry with verified=true
    - Maintain detailed logs of retry attempts and results
    - Report final success/failure status with specific details
    - Work with the Panel Registry Inspector to ensure all images are reviewed on quality (visual fidelity, consistency, etc.).

  TIMEOUTS:
    - Maximum retry limit: 3attempts per panel
    - Total generation timeout: 5 minutes
    - Graceful degradation for persistent failures
    - Clear error reporting for manual intervention
    - Automatic cleanup of temporary files and folders

  SUCCESS CRITERIA:
    - ALL panels (1-6) successfully generated with real image files
    - All images exist in both backend and frontend locations
    - Panel validation returns 100% PASS status
    - No fabricated or non-existent image references
    - All panels registered in panel registry with verified=true
    - Temporary files and folders cleaned up successfully

  expected_output: |
    Complete orchestration report with:
      - Initial generation attempt results
      - Retry attempts and outcomes for failed panels
      - Final panel generation status (SUCCESS/PARTIAL/FAILED)
      - Detailed panel-by-panel validation results
      - Registry verification status for all panels
      - JSON file received from the Visual Director with per panel the descriptions, the dialogues and the actual filenames.
      - Total attempts, successes, and failures
      - Cleanup results (files removed, folders cleaned)
      - Clear recommendation for next steps (proceed to assembly or manual intervention)
  agent: orchestrator
  context:
    - image_generation_task

panel_validation_task:
  description: >
    Validate that ALL comic panels referenced in the image generation results have
    corresponding actual image files in the filesystem before allowing comic assembly.
    Extract the panel-to-filename mapping from the IMAGE GENERATION TASK output and
    verify each file exists in both backend and frontend locations.

    PREFERRED VALIDATION METHOD:
    1. First, check the panel registry for verified panel information
    2. If registry data is available, use it to validate panels
    3. If registry data is not available, extract from context text
    4. Always prioritize registry data over context text extraction
  expected_output: >
    A comprehensive validation report showing:
    - Detailed panel-by-panel validation results using ACTUAL filenames from image generation
    - File system verification status
    - Overall PASS/FAIL determination
    - Specific missing panels if any failures
    - Clear recommendation for next steps
    - Include registry verification status in the report
  agent: evaluator
  context:
    - orchestrated_generation_task

panel_registry_inspection_task:
  description: >
    Inspect the panel registry for missing or unreadable images and verify alignment with dialogue.
    This task serves as a quality gate to ensure all panels are properly registered before layout begins.

    INSPECTION PROCESS:
    1. Read the panel registry to get all registered panels
    2. Verify that each panel has:
       - A filename registered
       - backend_synced=true
       - frontend_synced=true
       - verified=true
    3. Check that all registered files actually exist
    4. Ensure panel count matches expected (6 panels)
  expected_output: >
    A validation report listing all panels, their status, and a pass/fail result.
    Include specific details about any missing or unverified panels.
    If outcome is false, inform the orchestrator to regenerate missing panels.
    If outcome is positive, inform the comic_assembler to proceed with layout.
  agent: panel_registry_inspector
  async_execution: false
  context:
    - orchestrated_generation_task

comic_assembly_task:
  description: >
    Create the final comic layout using data from the centralized story metadata file.

    ASSEMBLY WORKFLOW:
    1. Use StoryMetadataReader action="get_summary" to check story completion status
    2. Verify all required agents have completed: story_writer, visual_director
    3. Use StoryMetadataForLayout to get properly formatted layout data (panels, dialogue, image_paths)
    4. Pass the layout data to ComicLayoutTool to generate the final comic
    5. Verify the comic layout is complete and properly formatted
    6. Use StoryMetadataWriter action="mark_completed", agent_name="comic_assembler"
    7. Use StoryMetadataWriter action="set_status", status="completed"

    VALIDATION CHECKS:
    - Ensure 6 panels with descriptions and dialogue
    - Verify all 6 image files exist and are accessible
    - Confirm story text is available for context
    - Check that all required data is present in metadata file

    IMPORTANT: Always use StoryMetadataForLayout to get the properly structured data
    before calling ComicLayoutTool. Do not try to extract data from task context.
  expected_output: >
    If any required data is missing: Error message requesting missing components
    If all data is available: Successfully generated comic layout with:
    - 6 panels with descriptions and dialogue
    - Properly embedded images
    - Clean markdown formatting
    - PDF version generated
    - Confirmation that comic assembly is complete

    NO agent reasoning or meta-commentary - only the final result status.

  agent: comic_assembler
  context:
    - orchestrated_generation_task
